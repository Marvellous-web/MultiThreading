package org.example.CompletableFuture;

import java.util.concurrent.*;



//Thsi topic comes after callable and future
//рдЕрдм рд╣рдо рдЕрдЧрд▓реЗ рдЯреЙрдкрд┐рдХ рдкрд░ рдЪрд▓рддреЗ рд╣реИрдВ тАФ CompletableFuture ЁЯФе
//рдпреЗ modern Java (Java 8+) рдХрд╛ feature рд╣реИ рдФрд░ рдмрд╣реБрдд powerful рд╣реИ тАФ рдХреНрдпреЛрдВ?
//
//        тЬЕ рдХреНрдпреЛрдВ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВ CompletableFuture?
//        ЁЯФБ Future.get() рдореЗрдВ thread block рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ тАФ CompletableFuture non-blocking рд╣реИ
//
//ЁЯФЧ рдЗрд╕рдореЗрдВ chaining рд╣реЛрддреА рд╣реИ (thenApply, thenAccept, thenRun, etc.)
//
//ЁЯФД Async execution, callbacks, exception handlingтАФall in one!
public class CompletableFutureExample1 {
    public static void main(String[] args) throws Exception {
        CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {
            try { Thread.sleep(2000); } catch (Exception e) {}
            return "ЁЯЪА Task completed!";
        });

        System.out.println("Task started... waiting for result");

        String result = future.get(); // wait karega
        System.out.println("Result: " + result);
    }
}
